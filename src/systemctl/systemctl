#!/bin/sh
# This file is part of uselessd.

# Copyright 2014 The Initfinder General

# uselessd is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.

# uselessd is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with uselessd; If not, see <http://www.gnu.org/licenses/>.

CONTROLPIPE='/run/systemd/fifoctl'
CONTROLFILES='/run/systemd/manager'

err() { echo "$1" >&2; }

show_help() {
    cat << EOF
systemctl [OPTIONS...] {COMMAND} ...

Query or send control commands to the uselessd manager.

-h --help                  Show this help message.
--root PATH                Enable unit files in the specified root directory
--kill-who WHO             Who to send signal to
-s --signal SIGNAL         Which signal to send
--scope UNIT_FILE_SCOPE    Can be one of system (default), global or user
                           (latter two are partially equivalent to --global and --user
                           from upstream systemd.)
--job-type TYPE            What type of job for the manager to queue (start, stop, reload, etc.)
                           This is handled automatically by the unit commands, but may be useful
                           manually for debugging.
--job-mode MODE            The mode with which to start the job (replace, fail, isolate, etc.)
                           Once again - handled automatically, may be used for debugging.
                           This option can be equivalent to --irreversible, --fail and
                           --ignore-dependencies from upstream systemd.
-f --force                 When enabling unit files, override existing symlinks
--runtime                  Make changes only temporarily (when used with enable/disable/etc.),
                           i.e. that are lost on reboot.

Unit Commands:
  list-units                      List loaded units
  list-sockets                    List loaded sockets ordered by address
  load [NAME...]                  Load a unit's metadata without
                                  activating it
  start [NAME...]                 Start (activate) a unit
  stop [NAME...]                  Stop (deactivate) a unit
  reload [NAME...]                Reload a unit
  restart [NAME...]               Start or restart a unit
  try-restart [NAME...]           Restart a unit if active
  reload-or-restart [NAME...]     Reload a unit if possible,
                                  otherwise start or restart
  reload-or-try-restart [NAME...] Reload a unit if possible,
                                  otherwise restart if active
  isolate [NAME]                  Start one unit and stop all others
  kill [NAME...]                  Send signal to processes of a unit
  is-active [NAME...]             Check whether unit is active
  is-failed [NAME...]             Check whether unit is failed
  status [NAME...]                Show runtime status of a unit
  show [NAME...]                  Show properties of unit/job
  set-property [NAME] [ASSIGNMENT...]
                                  Sets a resource control property of a unit
  reset-failed                    Reset failed state for all units
  list-dependencies [NAME]        Recursively show units which are required
                                  or wanted by this unit or by which this
                                  unit is required or wanted

Unit File Commands:
  list-unit-files                 List installed unit files
  enable [NAME...]                Enable a unit file
  disable [NAME...]               Disable a unit file
  reenable [NAME...]              Reenable a unit file
  preset [NAME...]                Enable/disable one or more unit files
                                  based on preset configuration
  is-enabled [NAME...]            Check whether unit file is enabled

  mask [NAME...]                  Mask a unit
  unmask [NAME...]                Unmask a unit
  link [PATH...]                  Link a unit file into the search path
  get-default                     Get the name of the default target
  set-default NAME                Set the default target

Job Commands:
  list-jobs                       List jobs
  cancel [JOB-ID...]              Cancel a job
  clear-jobs                      Cancel all jobs

Snapshot Commands:
  snapshot [NAME]                 Create a snapshot
  delete [NAME...]                Remove a snapshot

Environment Commands:
  show-environment                Dump environment
  set-environment [NAME=VALUE...] Set one or more environment variables
  unset-environment [NAME...]     Unset one or more environment variables

Manager Lifecycle Commands:
  daemon-reload                   Reload uselessd manager configuration
  daemon-reexec                   Reexecute uselessd manager
  dump                            Dump units and jobs in manager queue

System Commands:
  default                         Enter system default mode
  rescue                          Enter system rescue mode
  emergency                       Enter system emergency mode
  halt                            Shut down and halt the system
  poweroff                        Shut down and power-off the system
  reboot                          Shut down and reboot the system
  kexec                           Shut down and reboot the system with kexec
  user-exit                       Request user instance exit
  switch-root [ROOT] [INIT]       Change to a different root file system
  suspend                         Suspend the system
  hibernate                       Hibernate the system
  hybrid-sleep                    Hibernate and suspend the system
EOF
}

cmd_send() { printf "$1" > "$CONTROLPIPE"; }

reset_args() {
        printf "system" > /run/systemd/arg-scope
        printf "/" > /run/systemd/arg-root
        printf "N" > /run/systemd/arg-runtime
        printf "N" > /run/systemd/arg-force
        printf "start" > /run/systemd/arg-job-type
        printf "replace" > /run/systemd/arg-job-mode
}

main() {
	while [ "$1" ]; do
		case "$1" in
			--help|-h) show_help; return 0;;

			--root=) unit_root="$2"; shift;;

			--) shift; break;;
			-*)
				err "Unrecognized key: $1"
				show_help
				return 1
			;;
			*) break;;
		esac
		shift
	done

	[ -p $CONTROLPIPE ] || {
		err "Control pipe does not exist in /run."
		return 1
	}

	# Imperative programming. Never again.
	for i in "$@"
	do
		case "$i" in
			default) cmd_send 'deflt';;
			rescue) cmd_send 'rescu';;
			emergency) cmd_send 'emerg';;
			halt) cmd_send 'halts';;
			poweroff) cmd_send 'powff';;
			reboot) cmd_send 'rboot';;
			kexec) cmd_send 'kexec';;
			\exit)\
                                cmd_send 'mexit';;
			switch-root) :;;
			suspend) cmd_send 'suspn';;
			hibernate) cmd_send 'hiber';;
			hybrid-sleep) cmd_send 'hybsl';;
			daemon-reload) cmd_send 'rload';;
			daemon-reexec) cmd_send 'rexec';;
			show-environment) cmd_send 'lsenv';;
			list-jobs) cmd_send 'lsjob';;
			list-unit-files) cmd_send 'lsunf';;
			list-units) cmd_send 'lsuni';;
			list-sockets) cmd_send 'lssoc';;
			reset-failed) cmd_send 'resfa';;
			get-default) cmd_send 'getdt';;
                        clear-jobs) cmd_send 'clrjb';;
                        dump) cmd_send 'mdump';;

			*)
				err 'Unknown option, mate.'
				show_help
				return 1
			;;
		esac
	done
}

main "$@"
reset_args
